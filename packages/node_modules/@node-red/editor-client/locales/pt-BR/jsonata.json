{
    "$string": {
        "args": "arg[, prettify]",
        "desc": "Converte o parâmetro `arg` em uma string usando as seguintes regras de conversão:\n\n - Strings não são alteradas\n - As funções são convertidas em uma string vazia\n - Numérico infinito e NaN geram um erro porque não podem ser representados como um Número JSON\n - Todos os outros valores são convertidos em uma string JSON usando a função `JSON.stringify`. Se `prettify` for true, então o JSON \"prettified\" é produzido. ou seja, uma linha por campo e as linhas serão recuadas com base na profundidade do campo."
    },
    "$length": {
        "args": "str",
        "desc": "Retorna o número de caracteres na string` str`. Um erro é gerado se `str` não for uma string."
    },
    "$substring": {
        "args": "str, start[, length]",
        "desc": "Retorna uma string contendo os caracteres no primeiro parâmetro` str` começando na posição `start` (deslocamento zero). Se` length` for especificado, então a substring conterá no máximo caracteres de `length`. Se` start` for negativo em seguida, indica o número de caracteres do final de `str`."
    },
    "$substringBefore": {
        "args": "str, chars",
        "desc": "Retorna a substring antes da primeira ocorrência da sequência de caracteres` chars` em `string`. Se` string` não contém `chars`, então retorna` str`. "
    },
    "$substringAfter": {
        "args": "str, chars",
        "desc": "Retorna a substring após a primeira ocorrência da sequência de caracteres` chars` em `string`. Se` string` não contém `chars`, então retorna` str`. "
    },
    "$uppercase": {
        "args": "str",
        "desc": "Retorna uma string com todos os caracteres de` string` convertidos em maiúsculas. "
    },
    "$lowercase": {
        "args": "str",
        "desc": "Retorna uma string com todos os caracteres de` string` convertidos em minúsculas. "
    },
    "$trim": {
        "args": "str",
        "desc": "Normaliza e apara todos os caracteres de espaço em branco em `str` aplicando as seguintes etapas:\n\n - Todas as tabulações, retornos de carro e avanços de linha são substituídos por espaços.\n- Sequências contíguas de espaços são reduzidas a um único espaço.\n- Espaços à direita e à esquerda são removidos.\n\n Se `str` não for especificado (isto é, esta função é chamada sem argumentos), então o valor do contexto é usado como o valor de` str`. Um erro é gerado se `str` não for uma string."
    },
    "$contains": {
        "args": "str, pattern",
        "desc": "Retorna` verdadeiro` se `str` é correspondido por` padrão`, caso contrário, retorna `falso`. Se` str` não for especificado (ou seja, esta função é chamada com um argumento), então o valor do contexto é usado como o valor de `str`. O parâmetro` pattern` pode ser uma string ou uma expressão regular. "
    },
    "$split": {
        "args": "str[, separator][, limit]",
        "desc": "Divide o parâmetro` str` em uma matriz de substrings. É um erro se `str` não for uma string. O parâmetro opcional` separator` especifica os caracteres dentro de `str` sobre os quais deve ser dividido como uma string ou expressão regular. Se `separador` não for especificado, a string vazia será assumida e` str` será dividido em uma matriz de caracteres únicos. É um erro se `separador` não for uma string. O` limite opcional O parâmetro `é um número que especifica o número máximo de substrings a serem incluídas na matriz resultante. Quaisquer substrings adicionais são descartadas. Se` limit` não for especificado, então `str` será totalmente dividido sem limite para o tamanho da matriz resultante . É um erro se `limit` não for um número não negativo."
    },
    "$join": {
        "args": "array[, separator]",
        "desc": "Une uma matriz de strings de componentes em uma única string concatenada com cada string de componente separada pelo parâmetro` separador` opcional. É um erro se a `matriz` de entrada contiver um item que não seja uma string. Se` separator` for não especificado, assume-se que é uma string vazia, ou seja, nenhum `separador` entre as strings do componente. É um erro se` separator` não for uma string. "
    },
    "$match": {
        "args": "str, pattern [, limit]",
        "desc": "Aplica a string` str` à expressão regular `pattern` e retorna uma matriz de objetos, com cada objeto contendo informações sobre cada ocorrência de uma correspondência dentro de` str`. "
    },
    "$replace": {
        "args": "str, pattern, replacement [, limit]",
        "desc": "Encontra ocorrências de` padrão` dentro de `str` e as substitui por` substituição`.\n\nO parâmetro opcional `limit` é o número máximo de substituições."
    },
    "$now": {
        "args":"$[picture [, timezone]]",
        "desc":"Gera um carimbo de data / hora em formato compatível com ISO 8601 e o retorna como uma string. Se os parâmetros opcionais de imagem e fuso horário forem fornecidos, o carimbo de data / hora atual é formatado conforme descrito pela função` $ fromMillis () `"
    },
    "$base64encode": {
        "args":"string",
        "desc":"Converte uma string ASCII em uma representação de base 64. Cada caractere na string é tratado como um byte de dados binários. Isso requer que todos os caracteres na string estejam no intervalo de 0x00 a 0xFF, o que inclui todos os caracteres em strings codificadas por URI. Caracteres Unicode fora desse intervalo não são suportados. "
    },
    "$base64decode": {
        "args":"string",
        "desc":"Converte bytes codificados de base 64 em uma string, usando uma página de código UTF-8 Unicode."
    },
    "$number": {
        "args": "arg",
        "desc": "Converte o parâmetro` arg` em um número usando as seguintes regras de conversão:\n\n - Os números permanecem inalterados\n - Strings que contêm uma sequência de caracteres que representam um número JSON legal são convertidos para esse número\n - Todos os outros valores causam o lançamento de um erro."
    },
    "$abs": {
        "args":"number",
        "desc":"Retorna o valor absoluto do parâmetro `número`."
    },
    "$floor": {
        "args":"number",
        "desc":"Retorna o valor de `número` arredondado para baixo para o inteiro mais próximo que seja menor ou igual a` número`."
    },
    "$ceil": {
        "args":"number",
        "desc":"Retorna o valor de `número` arredondado para o número inteiro mais próximo que é maior ou igual a` número`."
    },
    "$round": {
        "args":"number [, precision]",
        "desc":"Retorna o valor do parâmetro `número` arredondado para o número de casas decimais especificado pelo parâmetro opcional` precisão`."
    },
    "$power": {
        "args":"base, exponent",
        "desc":"Retorna o valor de `base` elevado à potência de` expoente`."
    },
    "$sqrt": {
        "args":"number",
        "desc":"Retorna a raiz quadrada do valor do parâmetro `número`."
    },
    "$random": {
        "args":"",
        "desc":"Retorna um número pseudoaleatório maior ou igual a zero e menor que um."
    },
    "$millis": {
        "args":"",
        "desc":"Retorna o número de milissegundos desde o Unix Epoch (1º de janeiro de 1970 UTC) como um número. Todas as invocações de `$ millis ()` dentro de uma avaliação de uma expressão retornarão o mesmo valor."
    },
    "$sum": {
        "args": "array",
        "desc": "Retorna a soma aritmética de uma `matriz` de números. É um erro se o `array` de entrada contiver um item que não seja um número."
    },
    "$max": {
        "args": "array",
        "desc": "Retorna o número máximo em uma `matriz` de números. É um erro se o `array` de entrada contiver um item que não seja um número."
    },
    "$min": {
        "args": "array",
        "desc": "Retorna o número mínimo em uma `matriz` de números. É um erro se o `array` de entrada contiver um item que não seja um número."
    },
    "$average": {
        "args": "array",
        "desc": "Retorna o valor médio de uma `matriz` de números. É um erro se o `array` de entrada contiver um item que não seja um número."
    },
    "$boolean": {
        "args": "arg",
        "desc": "Converte o argumento em um booleano usando as seguintes regras:\n\n - `Boolean` : unchanged\n - `string`: empty : `false`\n - `string`: non-empty : `true`\n - `number`: `0` : `false`\n - `number`: non-zero : `true`\n - `null` : `false`\n - `array`: empty : `false`\n - `array`: contém um membro que lança para `true` : `true`\n - `array`: todos os membros lançados para `false` : `false`\n - `object`: empty : `false`\n - `object`: non-empty : `true`\n - `function` : `false`"
    },
    "$not": {
        "args": "arg",
        "desc": "Retorna NOT booleano no argumento.` Arg` é convertido primeiro em um booleano "
    },
    "$exists": {
        "args": "arg",
        "desc": "Retorna` true` booleano se a expressão `arg` for avaliada como um valor, ou` false` se a expressão não corresponder a nada (por exemplo, um caminho para uma referência de campo inexistente)."
    },
    "$count": {
        "args": "array",
        "desc": "Retorna o número de itens na matriz"
    },
    "$append": {
        "args": "array, array",
        "desc": "Anexa duas matrizes"
    },
    "$sort": {
        "args":"array [, function]",
        "desc":"Retorna uma matriz contendo todos os valores no parâmetro `array`, mas classificados em ordem.\n\nSe uma `function` de comparador é fornecida, então deve ser uma função que leva dois parâmetros:\n\n`function(left, right)`\n\nEsta função é invocada pelo algoritmo de classificação para comparar dois valores à esquerda e à direita. Se o valor de esquerda deve ser colocado após o valor de direita na ordem de classificação desejada, a função deve retornar booleano` true` para indicar uma troca. Caso contrário, deve retornar `false`."
    },
    "$reverse": {
        "args":"array",
        "desc":"Retorna um array contendo todos os valores do parâmetro` array`, mas na ordem reversa. "
    },
    "$shuffle": {
        "args":"array",
        "desc":"Retorna um array contendo todos os valores do parâmetro` array`, mas misturados em ordem aleatória. "
    },
    "$zip": {
        "args":"array, ...",
        "desc":"Retorna uma matriz convolvida (compactada) contendo matrizes agrupadas de valores dos argumentos `array1`… `arrayN` do índice 0, 1, 2 ...."
    },
    "$keys": {
        "args": "object",
        "desc": "Retorna um array contendo as chaves do objeto. Se o argumento for um array de objetos, então o array retornado contém uma lista não duplicada de todas as chaves em todos os objetos."
    },
    "$lookup": {
        "args": "object, key",
        "desc": "Retorna o valor associado à chave no objeto. Se o primeiro argumento for uma matriz de objetos, todos os objetos na matriz são pesquisados e os valores associados a todas as ocorrências da chave são retornados."
    },
    "$spread": {
        "args": "object",
        "desc": "Divide um objeto que contém pares de chave / valor em uma matriz de objetos, cada um com um único par de chave / valor do objeto de entrada. Se o parâmetro for uma matriz de objetos, a matriz resultante conterá um objeto para cada chave / par de valores em cada objeto na matriz fornecida. "
    },
    "$merge": {
        "args": "array&lt;object&gt;",
        "desc": "Mescla uma matriz de` objetos` em um único `objeto` contendo todos os pares de chave / valor de cada um dos objetos na matriz de entrada. Se qualquer um dos objetos de entrada contiver a mesma chave, então o` objeto` retornado conterá o valor do último na matriz. É um erro se a matriz de entrada contiver um item que não seja um objeto. "
    },
    "$sift": {
        "args":"object, function",
        "desc": "Retorna um objeto que contém apenas os pares de chave / valor do parâmetro` object` que satisfazem o predicado `function` passado como o segundo parâmetro.\n\nA `function` que é fornecida como o segundo parâmetro deve ter o seguinte assinatura:\n\n`function(value [, key [, object]])`"
    },
    "$each": {
        "args":"object, function",
        "desc":"Retorna um array contendo os valores retornados pela` função` quando aplicado a cada par chave / valor no `objeto`."
    },
    "$map": {
        "args":"array, function",
        "desc":"Retorna uma matriz contendo os resultados da aplicação do parâmetro `function` a cada valor no parâmetro `array`.\n\nA `function` que é fornecido como o segundo parâmetro deve ter a seguinte assinatura:\n\n`function(value [, index [, array]])`"
    },
    "$filter": {
        "args":"array, function",
        "desc":"Retorna um array contendo apenas os valores no parâmetro` array` que satisfazem o predicado `function`.\n\nThe `function` que é fornecido como o segundo parâmetro deve ter a seguinte assinatura:\n\n`function(value [, index [, array]])`"
    },
    "$reduce": {
        "args":"array, function [, init]",
        "desc":"Retorna um valor agregado derivado da aplicação do parâmetro` função` sucessivamente a cada valor em `matriz` em combinação com o resultado da aplicação anterior da função.\n\nA função deve aceitar dois argumentos e se comportar como um operador infixo entre cada valor dentro da `matriz`. A assinatura da `função` deve estar no formato: `myfunc($accumulator, $value[, $index[, $array]])`\n\nO parâmetro opcional `init` é usado como o valor inicial na agregação."
    },
    "$flowContext": {
        "args": "string[, string]",
        "desc": "Recupera uma propriedade de contexto de fluxo.\n\nEsta é uma função definida pelo Node-RED. "
    },
    "$globalContext": {
        "args": "string[, string]",
        "desc": "Recupera uma propriedade de contexto global.\n\nEsta é uma função definida pelo Node-RED. "
    },
    "$pad": {
        "args": "string, width [, char]",
        "desc": "Retorna uma cópia da `string` com preenchimento extra, se necessário, de forma que seu número total de caracteres seja pelo menos o valor absoluto do parâmetro `width`.\n\nSe `width` for um número positivo, a string será preenchida à direita; se negativo, é preenchido à esquerda.\n\nO argumento opcional `char` especifica os caracteres de preenchimento a serem usados. Se não for especificado, o padrão é o caractere de espaço. "
    },
    "$fromMillis": {
        "args": "number, [, picture [, timezone]]",
        "desc": "Converta o` número` que representa os milissegundos desde a época do Unix (1 January, 1970 UTC) em uma representação de string formatada do carimbo de data / hora conforme especificado pela string de imagem.\n\nSe o parâmetro opcional `imagem` for omitido, o carimbo de data / hora será formatado no formato ISO 8601.\n\nSe a string `imagem` opcional for fornecida, o carimbo de data / hora é formatado de acordo com a representação especificada nessa string. O comportamento desta função é consistente com a versão de dois argumentos da função XPath / XQuery `format-dateTime` conforme definido na especificação XPath F&O 3.1. O parâmetro de string de imagem define como o carimbo de data / hora é formatado e tem a mesma sintaxe de `format-dateTime`.\n\nSe a string opcional `timezone` for fornecida, o carimbo de data / hora formatado estará nesse fuso horário. A string `timezone` deve estar no formato '± HHMM', onde ± é o sinal de mais ou menos e HHMM é o deslocamento em horas e minutos do UTC. Deslocamento positivo para fusos horários a leste do UTC, deslocamento negativo para fusos horários a oeste do UTC. "
    },
    "$formatNumber": {
        "args": "number, picture [, options]",
        "desc": "Converte o `number` em uma string e o formata em uma representação decimal conforme especificado pela string` picture`.\n\n O comportamento desta função é consistente com a função XPath / XQuery fn: format-number conforme definido na especificação XPath F&O 3.1. O parâmetro de string de imagem define como o número é formatado e tem a mesma sintaxe de fn: format-number.\n\nO terceiro argumento opcional `options` é usado para substituir os caracteres de formatação específicos da localidade padrão, como o separador decimal. Se fornecido, este argumento deve ser um objeto contendo pares de nome / valor especificados na seção de formato decimal da especificação XPath F&O 3.1."
    },
    "$formatBase": {
        "args": "number [, radix]",
        "desc": "Converte o `number` em uma string e o formata em um inteiro representado na base do número especificada pelo argumento `radix`. Se` radix` não for especificado, o padrão é a base 10. `radix` pode estar entre 2 e 36, caso contrário, um erro será gerado. "
    },
    "$toMillis": {
        "args": "timestamp",
        "desc": "Converta uma string` timestamp` no formato ISO 8601 para o número de milissegundos desde a época do Unix (1 January, 1970 UTC)  como um número. Um erro é gerado se a string não estiver no formato correto. "
    },
    "$env": {
        "args": "arg",
        "desc": "Retorna o valor de uma variável de ambiente.\n\nEsta é uma função definida pelo Node-RED."
    },
    "$eval": {
        "args": "expr [, context]",
        "desc": "Analisa e avalia a string` expr` que contém JSON literal ou uma expressão JSONata usando o contexto atual como o contexto para avaliação. "
    },
    "$formatInteger": {
        "args": "number, picture",
        "desc": "Converte o` número` em uma string e o formata em uma representação inteira conforme especificado pela string `imagem`. O parâmetro da string de imagem define como o número é formatado e tem a mesma sintaxe de` fn: format-integer` do Especificação XPath F&O 3.1. "
    },
    "$parseInteger": {
        "args": "string, picture",
        "desc": "Analisa o conteúdo do parâmetro` string` para um inteiro (como um número JSON) usando o formato especificado pela string `picture`. O parâmetro de string` picture` tem o mesmo formato que `$ formatInteger`."
    },
    "$error": {
        "args": "[str]",
        "desc": "Lança um erro com uma mensagem. O` str` opcional substituirá a mensagem padrão da função `$ error () avaliada`"
    },
    "$assert": {
        "args": "arg, str",
        "desc": "Se` arg` for verdadeiro, a função retorna indefinido. Se `arg` for falso, uma exceção é lançada com` str` como a mensagem da exceção. "
    },
    "$single": {
        "args": "array, function",
        "desc": "Retorna o único valor no parâmetro` array` que satisfaz o predicado `função` (ou seja, a` função` retorna `true` booleano quando passado o valor). Lança uma exceção se o número de valores correspondentes não for exatamente um .\n\nA função deve ser fornecida na seguinte assinatura: `função (valor [, índice [, matriz]])` onde valor é cada entrada da matriz, índice é a posição desse valor e toda a matriz é passada como o terceiro argumento "
    },
    "$encodeUrlComponent": {
        "args": "str",
        "desc": "Codifica um componente Uniform Resource Locator (URL) substituindo cada instância de certos caracteres por uma, duas, três ou quatro sequências de escape que representam a codificação UTF-8 do caractere.\n\nExemplo: `$encodeUrlComponent(\"?x=test\")` => `\"%3Fx%3Dtest\"`"
    },
    "$encodeUrl": {
        "args": "str",
        "desc": "Codifica um Uniform Resource Locator (URL) substituindo cada instância de certos caracteres por uma, duas, três ou quatro sequências de escape que representam a codificação UTF-8 do caractere. \n\nExemplo: `$encodeUrl(\"https://mozilla.org/?x=шеллы\")` => `\"https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\"`"
    },
    "$decodeUrlComponent": {
        "args": "str",
        "desc": "Decodifica um componente Uniform Resource Locator (URL) criado anteriormente por encodeUrlComponent. \n\nExemplo: `$decodeUrlComponent(\"%3Fx%3Dtest\")` => `\"?x=test\"`"
    },
    "$decodeUrl": {
        "args": "str",
        "desc": "Decodifica um Localizador Uniforme de Recursos (URL) criado anteriormente por encodeUrl. \n\nExemplo: `$decodeUrl(\"https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\")` => `\"https://mozilla.org/?x=шеллы\"`"
    },
    "$distinct": {
        "args": "array",
        "desc": "Retorna uma matriz com valores duplicados removidos da `array` "
    },
    "$type": {
        "args": "value",
        "desc": "Retorna o tipo de `value` como uma string. Se `value` for indefinido, retornará `undefined` "
    },
    "$moment": {
        "args": "[str]",
        "desc": "Obtém um objeto de data usando a biblioteca Moment."
    }
}
